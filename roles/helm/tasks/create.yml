---
- name: "create : Start creation if binary doesn't exist"
  ansible.builtin.block:
    - name: "create : Create the temporary directory"
      ansible.builtin.file:
        path: "{{ sc_helm_download_tmpdir }}"
        state: directory
        recurse: yes
    - name: "create : Download clients from {{ sc_helm_download_baseurl }}/helm-v{{ sc_helm_release }}-linux-amd64.tar.gz"
      ansible.builtin.get_url: 
        url: "{{ sc_helm_download_baseurl }}/helm-v{{ sc_helm_release }}-linux-amd64.tar.gz"
        dest: "{{ sc_helm_download_tmpdir }}/helm-{{ sc_helm_release }}.tar.gz"
        timeout: 600
        force: true
        validate_certs: false
      notify: "remove temp"
    - name: "create : Unarchive content into {{ sc_helm_download_tmpdir }}"
      ansible.builtin.unarchive:
        src: "{{ sc_helm_download_tmpdir }}/helm-{{ sc_helm_release }}.tar.gz"
        dest: "{{ sc_helm_download_tmpdir }}"
      notify: "remove temp"
    - name: "create : client : Create binary helm into {{ sc_helm_bin_directory }}/helm-v{{ sc_helm_release }}"
      ansible.builtin.copy:
        src: "{{ sc_helm_download_tmpdir }}/helm"
        dest: "{{ sc_helm_bin_directory }}/helm-v{{ sc_helm_release }}"
        mode: u=rwx,g=rx,o=rx
      become: sc_helm_become
      when: not helm_bin_details.stat.exists
      tags:
        - helm
    - name: "create : Symbolic link {{ sc_helm_bin_directory }}/helm to {{ sc_helm_bin_directory }}/helm-v{{ sc_helm_release }}"
      ansible.builtin.file:
        src: "{{ sc_helm_bin_directory }}/helm-v{{ sc_helm_release }}"
        dest: "{{ sc_helm_bin_directory }}/helm"
        state: link
      become: sc_helm_become
      when: sc_helm_enable_symlink
      tags:
        - helm
  when: not helm_bin_details.stat.exists
  tags:
    - create
    - clients
